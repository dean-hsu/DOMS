// <auto-generated />
using DOMS.Model.DbModels;
using DOMS.Repository.DbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace DOMS.WebApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171206130031_mig2")]
    partial class mig2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DOMS.Model.DbModels.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrandDescription");

                    b.Property<string>("BrandLogo");

                    b.Property<string>("BrandName")
                        .IsRequired();

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DeletedTime");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("BrandId");

                    b.HasIndex("CountryId");

                    b.ToTable("DOMS_Brand");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Catalogue", b =>
                {
                    b.Property<int>("CatalogueId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("FamilyId");

                    b.Property<string>("Memo");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("CatalogueId");

                    b.HasIndex("FamilyId");

                    b.ToTable("DOMS_Catalogue");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryCode")
                        .IsRequired();

                    b.Property<string>("CountryName")
                        .IsRequired();

                    b.HasKey("CountryId");

                    b.ToTable("DOMS_Country");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Courier", b =>
                {
                    b.Property<int>("CourierId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("QrCode");

                    b.Property<string>("Wechat");

                    b.HasKey("CourierId");

                    b.ToTable("DOMS_Courier");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("AlipayAccount");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DeletedTime");

                    b.Property<string>("IdCard");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<DateTime>("UpdatedTime");

                    b.Property<string>("WechatAccount");

                    b.Property<string>("WechatName");

                    b.HasKey("CustomerId");

                    b.ToTable("DOMS_Customer");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Delivery", b =>
                {
                    b.Property<int>("DeliveryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourierId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DeletedTime");

                    b.Property<string>("TrackNumber")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("DeliveryId");

                    b.HasIndex("CourierId");

                    b.ToTable("DOMS_Delivery");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Memo");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("FamilyId");

                    b.ToTable("DOMS_Family");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedTime");

                    b.Property<int>("CustomerId");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DeletedTime");

                    b.Property<int?>("DeliveryId");

                    b.Property<string>("Memo");

                    b.Property<int?>("PaymentMethod");

                    b.Property<int>("PaymentStatus");

                    b.Property<int>("ProductId");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("SellPriceAud");

                    b.Property<decimal>("SellPriceRmb");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("ProductId");

                    b.ToTable("DOMS_Order");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BrandId");

                    b.Property<int?>("CatalogueId");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<decimal>("CurrentCostAud");

                    b.Property<decimal>("CurrentCostRmb");

                    b.Property<decimal>("CurrentSellPriceAud");

                    b.Property<decimal>("CurrentSellPriceRmb");

                    b.Property<bool>("Deleted");

                    b.Property<DateTime>("DeletedTime");

                    b.Property<string>("Description");

                    b.Property<string>("Labels");

                    b.Property<string>("ProductName")
                        .IsRequired();

                    b.Property<DateTime>("UpdatedTime");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatalogueId");

                    b.ToTable("DOMS_Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Brand", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Catalogue", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.Family", "Family")
                        .WithMany("Catalogues")
                        .HasForeignKey("FamilyId");
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Delivery", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.Courier", "Courier")
                        .WithMany()
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Order", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DOMS.Model.DbModels.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId");

                    b.HasOne("DOMS.Model.DbModels.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DOMS.Model.DbModels.Product", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("DOMS.Model.DbModels.Catalogue", "Catalogue")
                        .WithMany()
                        .HasForeignKey("CatalogueId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DOMS.Model.DbModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DOMS.Model.DbModels.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
